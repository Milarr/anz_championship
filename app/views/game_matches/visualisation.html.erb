<h1 id="game_visualisation" data="<%= @game_match_data.to_json %>">Game Matches</h1>

<link rel="stylesheet" type="text/css" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
<script type="text/javascript" src="http://mbostock.github.com/d3/d3.js?1.29.1"></script>
<div id='match_chord_diagram'></div>

<script type="text/javascript">
  var data = JSON.parse($('#game_visualisation').attr('data'));

  var width = 1100,
  height = 1100,
  outerRadius = 370,
  innerRadius = outerRadius - 30,
  r1 = outerRadius + 30,
  r0 = r1 - 80;

  var color = d3.scale.category20();

  var formatPercent = d3.format(".1%");

  var tooltip = d3.select("body")
    .append("div")
    .style("width", "200px")
    .style("height", "50px")
    .style("text-align", "center")
    .style("background", "lightblue")
    .style("padding", "2px")
    .style("font", "12px sans-serif")
    .style("border", "0px")
    .style("border-radius", "8px")
    .style("position", "absolute")
    .style("z-index", "10")
    .style("visibility", "hidden");

  var arc = d3.svg.arc()
    .innerRadius(innerRadius)
    .outerRadius(outerRadius);

  var layout = d3.layout.chord()
      .padding(0.04)
      .sortSubgroups(d3.ascending)
      .sortChords(d3.descending);

  var path = d3.svg.chord()
    .radius(innerRadius);

  var svg = d3.select("#match_chord_diagram").append("svg")
    .attr("width", width)
    .attr("height", height)
    .append("g")
    .attr("id", "circle")
    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

  svg.append("circle")
    .attr("r", outerRadius);

  var tip = d3.tip()
    .attr('class', 'd3-tip')
    .html(function(d) {
      return d + ": <span style='color:orangered'>" + data.labels[1] + "</span>";
    });

  svg.call(tip);

  layout.matrix(data.matrix);


  var group = svg.selectAll(".group")
    .data(layout.groups)
    .enter().append("g")
    .on("mouseover", fade(.02))
    .on("mouseout", fade(.80));

  var groupPath = group.append("path")
    .attr("id", function(d,i) {return "group" + i; })
    .attr("d", arc)
    .style("fill", function(d) { return color(d.index); });

  var groupText = group.append("text")
    .each(function(d) { d.angle = (d.startAngle + d.endAngle) / 2; })
    .attr("dy", ".35em")
    .attr("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
      .attr("transform", function(d) {
        return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
            + "translate(" + (r0 + 55) + ")"
            + (d.angle > Math.PI ? "rotate(180)" : "");
      })
    .text(function(d, i) {
      return data.labels[i];
    });

  var chord = svg.selectAll(".chord")
    .data(layout.chords)
    .enter().append("path")
    .attr("class", "chord")
    .style("fill", function(d) { return color(d.source.index); })
    .style("stroke", "grey")
    .attr("d", d3.svg.chord().radius(innerRadius))
    .on("mouseover", function(d){return tooltip.style("visibility", "visible").text(data.labels[d.source.index] + ": "+ d.source.value + " VS " + data.labels[d.target.index] + ": "+ d.target.value);})
    .on("mousemove", function(d){return tooltip.style("top", (event.pageY-10)+"px").style("left",(event.pageX+10)+"px").text(data.labels[d.source.index] + ": "+ d.source.value + " VS " + data.labels[d.target.index] + ": "+ d.target.value);})
    .on("mouseout", function(){return tooltip.style("visibility", "hidden");});

  function fade(opacity) {
    return function(d, i) {
      svg.selectAll(".chord")
          .filter(function(d) { return d.source.index != i && d.target.index != i; })
        .transition()
          .style("stroke-opacity", opacity)
          .style("fill-opacity", opacity)
    };
  }

</script>
